//
//  SylvesterMockEditorOpenTestCase.swift
//  Sylvester Tests ðŸ˜¼
//
//  Created by Chris Zielinski on 12/8/18.
//  Copyright Â© 2018 Big Z Labs. All rights reserved.
//

import SourceKittenFramework
#if XPC
@testable import SylvesterXPC
#else
@testable import Sylvester
#endif

class SylvesterMockEditorOpenTestCase: SylvesterTestCase {

    // MARK: - Source Contents

    // swiftlint:disable force_try
    var appDelegateSource: String {
        return try! readSourceFile(.appDelegate)
    }

    var viewControllerSource: String {
        return try! readSourceFile(.viewController)
    }

    var aProtocolSource: String {
        return try! readSourceFile(.aProtocol)
    }

    var placeholdersSource: String {
        return try! readSourceFile(.placeholders)
    }
    // swiftlint:enable force_try

    // MARK: - Files

    var appDelegateFile: File {
        return File(contents: appDelegateSource)
    }

    var viewControllerFile: File {
        return File(contents: viewControllerSource)
    }

    var aProtocolFile: File {
        return File(contents: aProtocolSource)
    }

    var placeholdersFile: File {
        return File(contents: placeholdersSource)
    }

    // MARK: - Editor Open Responses

    // swiftlint:disable force_try
    var appDelegateEditorOpenResponse: SKBaseResponse {
        return try! decodeMustache(template: .appDelegateEditorOpenMustache, sourceFile: .appDelegate)
    }

    var viewControllerEditorOpenResponse: SKBaseResponse {
        return try! decodeMustache(template: .viewControllerEditorOpenMustache, sourceFile: .viewController)
    }

    var aProtocolEditorOpenResponse: SKBaseResponse {
        return try! decodeMustache(template: .aProtocolEditorOpenMustache, sourceFile: .aProtocol)
    }

    var placeholdersEditorOpenResponse: SKBaseResponse {
        return try! decodeMustache(template: .placeholdersEditorOpenMustache, sourceFile: .placeholders)
    }
    // swiftlint:enable force_try

    // MARK: - Top Level Substructures

    var appDelegateClassSubstructure: SKSubstructure {
        return appDelegateEditorOpenResponse.topLevelSubstructures[0]
    }

    var viewControllerClassSubstructure: SKSubstructure {
        return viewControllerEditorOpenResponse.topLevelSubstructures[0]
    }

    var aProtocolProtocolSubstructure: SKSubstructure {
        return aProtocolEditorOpenResponse.topLevelSubstructures[0]
    }

    var placeholdersSubstructureChildren: SKSubstructureChildren {
        return placeholdersEditorOpenResponse.topLevelSubstructures
    }

}
