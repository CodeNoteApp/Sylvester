//  SKSourceKind.swift
//  Sylvester ðŸ˜¼
//
//  Created by the 'generate_boilerplate.swift' script on 2023/04/08.

/// - Warning: This enumeration is generated by the 'generate_boilerplate.swift' script.
///            You can update this enumeration by running `make generate-boilerplate`.
public enum SKSourceKind: String, Equatable, Codable, CaseIterable, SourceKitUID {
    /// The `source.lang.swift.accessibility.fileprivate` SourceKit key.
    case accessibilityFilePrivate = "source.lang.swift.accessibility.fileprivate"
    /// The `source.lang.swift.accessibility.internal` SourceKit key.
    case accessibilityInternal = "source.lang.swift.accessibility.internal"
    /// The `source.lang.swift.accessibility.open` SourceKit key.
    case accessibilityOpen = "source.lang.swift.accessibility.open"
    /// The `source.lang.swift.accessibility.private` SourceKit key.
    case accessibilityPrivate = "source.lang.swift.accessibility.private"
    /// The `source.lang.swift.accessibility.public` SourceKit key.
    case accessibilityPublic = "source.lang.swift.accessibility.public"
    /// The `source.lang.swift.attribute.availability` SourceKit key.
    case attributeAvailability = "source.lang.swift.attribute.availability"
    /// The `source.lang.swift.commenttag` SourceKit key.
    case commenttag = "source.lang.swift.commenttag"
    /// The `source.lang.swift.completion.unresolvedmember` SourceKit key.
    case completionUnresolvedmember = "source.lang.swift.completion.unresolvedmember"
    /// The `source.lang.swift.decl.actor` SourceKit key.
    case declActor = "source.lang.swift.decl.actor"
    /// The `source.lang.swift.decl.associatedtype` SourceKit key.
    case declAssociatedType = "source.lang.swift.decl.associatedtype"
    /// The `source.lang.swift.decl.class` SourceKit key.
    case declClass = "source.lang.swift.decl.class"
    /// The `source.lang.swift.decl.enum` SourceKit key.
    case declEnum = "source.lang.swift.decl.enum"
    /// The `source.lang.swift.decl.enumcase` SourceKit key.
    case declEnumCase = "source.lang.swift.decl.enumcase"
    /// The `source.lang.swift.decl.enumelement` SourceKit key.
    case declEnumElement = "source.lang.swift.decl.enumelement"
    /// The `source.lang.swift.decl.extension` SourceKit key.
    case declExtension = "source.lang.swift.decl.extension"
    /// The `source.lang.swift.decl.extension.class` SourceKit key.
    case declExtensionClass = "source.lang.swift.decl.extension.class"
    /// The `source.lang.swift.decl.extension.enum` SourceKit key.
    case declExtensionEnum = "source.lang.swift.decl.extension.enum"
    /// The `source.lang.swift.decl.extension.protocol` SourceKit key.
    case declExtensionProtocol = "source.lang.swift.decl.extension.protocol"
    /// The `source.lang.swift.decl.extension.struct` SourceKit key.
    case declExtensionStruct = "source.lang.swift.decl.extension.struct"
    /// The `source.lang.swift.decl.function.accessor.address` SourceKit key.
    case declFunctionAccessorAddress = "source.lang.swift.decl.function.accessor.address"
    /// The `source.lang.swift.decl.function.accessor.didset` SourceKit key.
    case declFunctionAccessorDidSet = "source.lang.swift.decl.function.accessor.didset"
    /// The `source.lang.swift.decl.function.accessor.getter` SourceKit key.
    case declFunctionAccessorGetter = "source.lang.swift.decl.function.accessor.getter"
    /// The `source.lang.swift.decl.function.accessor.modify` SourceKit key.
    case declFunctionAccessorModify = "source.lang.swift.decl.function.accessor.modify"
    /// The `source.lang.swift.decl.function.accessor.mutableaddress` SourceKit key.
    case declFunctionAccessorMutableAddress = "source.lang.swift.decl.function.accessor.mutableaddress"
    /// The `source.lang.swift.decl.function.accessor.read` SourceKit key.
    case declFunctionAccessorRead = "source.lang.swift.decl.function.accessor.read"
    /// The `source.lang.swift.decl.function.accessor.setter` SourceKit key.
    case declFunctionAccessorSetter = "source.lang.swift.decl.function.accessor.setter"
    /// The `source.lang.swift.decl.function.accessor.willset` SourceKit key.
    case declFunctionAccessorWillSet = "source.lang.swift.decl.function.accessor.willset"
    /// The `source.lang.swift.decl.function.constructor` SourceKit key.
    case declFunctionConstructor = "source.lang.swift.decl.function.constructor"
    /// The `source.lang.swift.decl.function.destructor` SourceKit key.
    case declFunctionDestructor = "source.lang.swift.decl.function.destructor"
    /// The `source.lang.swift.decl.function.free` SourceKit key.
    case declFunctionFree = "source.lang.swift.decl.function.free"
    /// The `source.lang.swift.decl.function.method.class` SourceKit key.
    case declFunctionMethodClass = "source.lang.swift.decl.function.method.class"
    /// The `source.lang.swift.decl.function.method.instance` SourceKit key.
    case declFunctionMethodInstance = "source.lang.swift.decl.function.method.instance"
    /// The `source.lang.swift.decl.function.method.static` SourceKit key.
    case declFunctionMethodStatic = "source.lang.swift.decl.function.method.static"
    /// The `source.lang.swift.decl.function.operator.infix` SourceKit key.
    case declFunctionOperatorInfix = "source.lang.swift.decl.function.operator.infix"
    /// The `source.lang.swift.decl.function.operator.postfix` SourceKit key.
    case declFunctionOperatorPostfix = "source.lang.swift.decl.function.operator.postfix"
    /// The `source.lang.swift.decl.function.operator.prefix` SourceKit key.
    case declFunctionOperatorPrefix = "source.lang.swift.decl.function.operator.prefix"
    /// The `source.lang.swift.decl.function.subscript` SourceKit key.
    case declFunctionSubscript = "source.lang.swift.decl.function.subscript"
    /// The `source.lang.swift.decl.generic_type_param` SourceKit key.
    case declGenericTypeParam = "source.lang.swift.decl.generic_type_param"
    /// The `source.lang.swift.decl.macro` SourceKit key.
    case declMacro = "source.lang.swift.decl.macro"
    /// The `source.lang.swift.decl.module` SourceKit key.
    case declModule = "source.lang.swift.decl.module"
    /// The `source.lang.swift.decl.opaquetype` SourceKit key.
    case declOpaquetype = "source.lang.swift.decl.opaquetype"
    /// The `source.lang.swift.decl.precedencegroup` SourceKit key.
    case declPrecedenceGroup = "source.lang.swift.decl.precedencegroup"
    /// The `source.lang.swift.decl.protocol` SourceKit key.
    case declProtocol = "source.lang.swift.decl.protocol"
    /// The `source.lang.swift.decl.struct` SourceKit key.
    case declStruct = "source.lang.swift.decl.struct"
    /// The `source.lang.swift.decl.typealias` SourceKit key.
    case declTypeAlias = "source.lang.swift.decl.typealias"
    /// The `source.lang.swift.decl.var.class` SourceKit key.
    case declVarClass = "source.lang.swift.decl.var.class"
    /// The `source.lang.swift.decl.var.global` SourceKit key.
    case declVarGlobal = "source.lang.swift.decl.var.global"
    /// The `source.lang.swift.decl.var.instance` SourceKit key.
    case declVarInstance = "source.lang.swift.decl.var.instance"
    /// The `source.lang.swift.decl.var.local` SourceKit key.
    case declVarLocal = "source.lang.swift.decl.var.local"
    /// The `source.lang.swift.decl.var.parameter` SourceKit key.
    case declVarParameter = "source.lang.swift.decl.var.parameter"
    /// The `source.lang.swift.decl.var.static` SourceKit key.
    case declVarStatic = "source.lang.swift.decl.var.static"
    /// The `source.lang.swift.expr` SourceKit key.
    case expr = "source.lang.swift.expr"
    /// The `source.lang.swift.expr.argument` SourceKit key.
    case exprArgument = "source.lang.swift.expr.argument"
    /// The `source.lang.swift.expr.array` SourceKit key.
    case exprArray = "source.lang.swift.expr.array"
    /// The `source.lang.swift.expr.call` SourceKit key.
    case exprCall = "source.lang.swift.expr.call"
    /// The `source.lang.swift.expr.closure` SourceKit key.
    case exprClosure = "source.lang.swift.expr.closure"
    /// The `source.lang.swift.expr.dictionary` SourceKit key.
    case exprDictionary = "source.lang.swift.expr.dictionary"
    /// The `source.lang.swift.expr.object_literal` SourceKit key.
    case exprObjectLiteral = "source.lang.swift.expr.object_literal"
    /// The `source.lang.swift.expr.tuple` SourceKit key.
    case exprTuple = "source.lang.swift.expr.tuple"
    /// The `source.lang.swift.foreach.sequence` SourceKit key.
    case forEachSequence = "source.lang.swift.foreach.sequence"
    /// The `source.lang.swift.import.module.clang` SourceKit key.
    case importModuleClang = "source.lang.swift.import.module.clang"
    /// The `source.lang.swift.import.module.swift` SourceKit key.
    case importModuleSwift = "source.lang.swift.import.module.swift"
    /// The `source.lang.swift.keyword` SourceKit key.
    case keyword = "source.lang.swift.keyword"
    /// The `source.lang.swift.keyword.Any` SourceKit key.
    case keywordAny = "source.lang.swift.keyword.Any"
    /// The `source.lang.swift.keyword.Self` SourceKit key.
    case keywordUppercaseSelf = "source.lang.swift.keyword.Self"
    /// The `source.lang.swift.keyword.as` SourceKit key.
    case keywordAs = "source.lang.swift.keyword.as"
    /// The `source.lang.swift.keyword.associatedtype` SourceKit key.
    case keywordAssociatedType = "source.lang.swift.keyword.associatedtype"
    /// The `source.lang.swift.keyword.break` SourceKit key.
    case keywordBreak = "source.lang.swift.keyword.break"
    /// The `source.lang.swift.keyword.case` SourceKit key.
    case keywordCase = "source.lang.swift.keyword.case"
    /// The `source.lang.swift.keyword.catch` SourceKit key.
    case keywordCatch = "source.lang.swift.keyword.catch"
    /// The `source.lang.swift.keyword.class` SourceKit key.
    case keywordClass = "source.lang.swift.keyword.class"
    /// The `source.lang.swift.keyword.continue` SourceKit key.
    case keywordContinue = "source.lang.swift.keyword.continue"
    /// The `source.lang.swift.keyword.default` SourceKit key.
    case keywordDefault = "source.lang.swift.keyword.default"
    /// The `source.lang.swift.keyword.defer` SourceKit key.
    case keywordDefer = "source.lang.swift.keyword.defer"
    /// The `source.lang.swift.keyword.deinit` SourceKit key.
    case keywordDeinit = "source.lang.swift.keyword.deinit"
    /// The `source.lang.swift.keyword.do` SourceKit key.
    case keywordDo = "source.lang.swift.keyword.do"
    /// The `source.lang.swift.keyword.else` SourceKit key.
    case keywordElse = "source.lang.swift.keyword.else"
    /// The `source.lang.swift.keyword.enum` SourceKit key.
    case keywordEnum = "source.lang.swift.keyword.enum"
    /// The `source.lang.swift.keyword.extension` SourceKit key.
    case keywordExtension = "source.lang.swift.keyword.extension"
    /// The `source.lang.swift.keyword.fallthrough` SourceKit key.
    case keywordFallThrough = "source.lang.swift.keyword.fallthrough"
    /// The `source.lang.swift.keyword.false` SourceKit key.
    case keywordFalse = "source.lang.swift.keyword.false"
    /// The `source.lang.swift.keyword.fileprivate` SourceKit key.
    case keywordFilePrivate = "source.lang.swift.keyword.fileprivate"
    /// The `source.lang.swift.keyword.for` SourceKit key.
    case keywordFor = "source.lang.swift.keyword.for"
    /// The `source.lang.swift.keyword.func` SourceKit key.
    case keywordFunc = "source.lang.swift.keyword.func"
    /// The `source.lang.swift.keyword.guard` SourceKit key.
    case keywordGuard = "source.lang.swift.keyword.guard"
    /// The `source.lang.swift.keyword.if` SourceKit key.
    case keywordIf = "source.lang.swift.keyword.if"
    /// The `source.lang.swift.keyword.import` SourceKit key.
    case keywordImport = "source.lang.swift.keyword.import"
    /// The `source.lang.swift.keyword.in` SourceKit key.
    case keywordIn = "source.lang.swift.keyword.in"
    /// The `source.lang.swift.keyword.init` SourceKit key.
    case keywordInit = "source.lang.swift.keyword.init"
    /// The `source.lang.swift.keyword.inout` SourceKit key.
    case keywordInout = "source.lang.swift.keyword.inout"
    /// The `source.lang.swift.keyword.internal` SourceKit key.
    case keywordInternal = "source.lang.swift.keyword.internal"
    /// The `source.lang.swift.keyword.is` SourceKit key.
    case keywordIs = "source.lang.swift.keyword.is"
    /// The `source.lang.swift.keyword.let` SourceKit key.
    case keywordLet = "source.lang.swift.keyword.let"
    /// The `source.lang.swift.keyword.nil` SourceKit key.
    case keywordNil = "source.lang.swift.keyword.nil"
    /// The `source.lang.swift.keyword.operator` SourceKit key.
    case keywordOperator = "source.lang.swift.keyword.operator"
    /// The `source.lang.swift.keyword.precedencegroup` SourceKit key.
    case keywordPrecedenceGroup = "source.lang.swift.keyword.precedencegroup"
    /// The `source.lang.swift.keyword.private` SourceKit key.
    case keywordPrivate = "source.lang.swift.keyword.private"
    /// The `source.lang.swift.keyword.protocol` SourceKit key.
    case keywordProtocol = "source.lang.swift.keyword.protocol"
    /// The `source.lang.swift.keyword.public` SourceKit key.
    case keywordPublic = "source.lang.swift.keyword.public"
    /// The `source.lang.swift.keyword.repeat` SourceKit key.
    case keywordRepeat = "source.lang.swift.keyword.repeat"
    /// The `source.lang.swift.keyword.rethrows` SourceKit key.
    case keywordRethrows = "source.lang.swift.keyword.rethrows"
    /// The `source.lang.swift.keyword.return` SourceKit key.
    case keywordReturn = "source.lang.swift.keyword.return"
    /// The `source.lang.swift.keyword.self` SourceKit key.
    case keywordSelf = "source.lang.swift.keyword.self"
    /// The `source.lang.swift.keyword.static` SourceKit key.
    case keywordStatic = "source.lang.swift.keyword.static"
    /// The `source.lang.swift.keyword.struct` SourceKit key.
    case keywordStruct = "source.lang.swift.keyword.struct"
    /// The `source.lang.swift.keyword.subscript` SourceKit key.
    case keywordSubscript = "source.lang.swift.keyword.subscript"
    /// The `source.lang.swift.keyword.super` SourceKit key.
    case keywordSuper = "source.lang.swift.keyword.super"
    /// The `source.lang.swift.keyword.switch` SourceKit key.
    case keywordSwitch = "source.lang.swift.keyword.switch"
    /// The `source.lang.swift.keyword.throw` SourceKit key.
    case keywordThrow = "source.lang.swift.keyword.throw"
    /// The `source.lang.swift.keyword.throws` SourceKit key.
    case keywordThrows = "source.lang.swift.keyword.throws"
    /// The `source.lang.swift.keyword.true` SourceKit key.
    case keywordTrue = "source.lang.swift.keyword.true"
    /// The `source.lang.swift.keyword.try` SourceKit key.
    case keywordTry = "source.lang.swift.keyword.try"
    /// The `source.lang.swift.keyword.typealias` SourceKit key.
    case keywordTypeAlias = "source.lang.swift.keyword.typealias"
    /// The `source.lang.swift.keyword.var` SourceKit key.
    case keywordVar = "source.lang.swift.keyword.var"
    /// The `source.lang.swift.keyword.where` SourceKit key.
    case keywordWhere = "source.lang.swift.keyword.where"
    /// The `source.lang.swift.keyword.while` SourceKit key.
    case keywordWhile = "source.lang.swift.keyword.while"
    /// The `source.lang.swift.literal.array` SourceKit key.
    case literalArray = "source.lang.swift.literal.array"
    /// The `source.lang.swift.literal.boolean` SourceKit key.
    case literalBoolean = "source.lang.swift.literal.boolean"
    /// The `source.lang.swift.literal.color` SourceKit key.
    case literalColor = "source.lang.swift.literal.color"
    /// The `source.lang.swift.literal.dictionary` SourceKit key.
    case literalDictionary = "source.lang.swift.literal.dictionary"
    /// The `source.lang.swift.literal.image` SourceKit key.
    case literalImage = "source.lang.swift.literal.image"
    /// The `source.lang.swift.literal.integer` SourceKit key.
    case literalInteger = "source.lang.swift.literal.integer"
    /// The `source.lang.swift.literal.nil` SourceKit key.
    case literalNil = "source.lang.swift.literal.nil"
    /// The `source.lang.swift.literal.string` SourceKit key.
    case literalString = "source.lang.swift.literal.string"
    /// The `source.lang.swift.literal.tuple` SourceKit key.
    case literalTuple = "source.lang.swift.literal.tuple"
    /// The `source.lang.swift.pattern` SourceKit key.
    case pattern = "source.lang.swift.pattern"
    /// The `source.lang.swift.range.invalid` SourceKit key.
    case rangeInvalid = "source.lang.swift.range.invalid"
    /// The `source.lang.swift.range.multistatement` SourceKit key.
    case rangeMultiStatement = "source.lang.swift.range.multistatement"
    /// The `source.lang.swift.range.multitypememberdeclaration` SourceKit key.
    case rangeMultiTypeMemberDeclaration = "source.lang.swift.range.multitypememberdeclaration"
    /// The `source.lang.swift.range.singledeclaration` SourceKit key.
    case rangeSingleDeclaration = "source.lang.swift.range.singledeclaration"
    /// The `source.lang.swift.range.singleexpression` SourceKit key.
    case rangeSingleExpression = "source.lang.swift.range.singleexpression"
    /// The `source.lang.swift.range.singlestatement` SourceKit key.
    case rangeSingleStatement = "source.lang.swift.range.singlestatement"
    /// The `source.lang.swift.ref.actor` SourceKit key.
    case refActor = "source.lang.swift.ref.actor"
    /// The `source.lang.swift.ref.associatedtype` SourceKit key.
    case refAssociatedType = "source.lang.swift.ref.associatedtype"
    /// The `source.lang.swift.ref.class` SourceKit key.
    case refClass = "source.lang.swift.ref.class"
    /// The `source.lang.swift.ref.enum` SourceKit key.
    case refEnum = "source.lang.swift.ref.enum"
    /// The `source.lang.swift.ref.enumelement` SourceKit key.
    case refEnumElement = "source.lang.swift.ref.enumelement"
    /// The `source.lang.swift.ref.function.accessor.address` SourceKit key.
    case refFunctionAccessorAddress = "source.lang.swift.ref.function.accessor.address"
    /// The `source.lang.swift.ref.function.accessor.didset` SourceKit key.
    case refFunctionAccessorDidSet = "source.lang.swift.ref.function.accessor.didset"
    /// The `source.lang.swift.ref.function.accessor.getter` SourceKit key.
    case refFunctionAccessorGetter = "source.lang.swift.ref.function.accessor.getter"
    /// The `source.lang.swift.ref.function.accessor.modify` SourceKit key.
    case refFunctionAccessorModify = "source.lang.swift.ref.function.accessor.modify"
    /// The `source.lang.swift.ref.function.accessor.mutableaddress` SourceKit key.
    case refFunctionAccessorMutableAddress = "source.lang.swift.ref.function.accessor.mutableaddress"
    /// The `source.lang.swift.ref.function.accessor.read` SourceKit key.
    case refFunctionAccessorRead = "source.lang.swift.ref.function.accessor.read"
    /// The `source.lang.swift.ref.function.accessor.setter` SourceKit key.
    case refFunctionAccessorSetter = "source.lang.swift.ref.function.accessor.setter"
    /// The `source.lang.swift.ref.function.accessor.willset` SourceKit key.
    case refFunctionAccessorWillSet = "source.lang.swift.ref.function.accessor.willset"
    /// The `source.lang.swift.ref.function.constructor` SourceKit key.
    case refFunctionConstructor = "source.lang.swift.ref.function.constructor"
    /// The `source.lang.swift.ref.function.destructor` SourceKit key.
    case refFunctionDestructor = "source.lang.swift.ref.function.destructor"
    /// The `source.lang.swift.ref.function.free` SourceKit key.
    case refFunctionFree = "source.lang.swift.ref.function.free"
    /// The `source.lang.swift.ref.function.method.class` SourceKit key.
    case refFunctionMethodClass = "source.lang.swift.ref.function.method.class"
    /// The `source.lang.swift.ref.function.method.instance` SourceKit key.
    case refFunctionMethodInstance = "source.lang.swift.ref.function.method.instance"
    /// The `source.lang.swift.ref.function.method.static` SourceKit key.
    case refFunctionMethodStatic = "source.lang.swift.ref.function.method.static"
    /// The `source.lang.swift.ref.function.operator.infix` SourceKit key.
    case refFunctionOperatorInfix = "source.lang.swift.ref.function.operator.infix"
    /// The `source.lang.swift.ref.function.operator.postfix` SourceKit key.
    case refFunctionOperatorPostfix = "source.lang.swift.ref.function.operator.postfix"
    /// The `source.lang.swift.ref.function.operator.prefix` SourceKit key.
    case refFunctionOperatorPrefix = "source.lang.swift.ref.function.operator.prefix"
    /// The `source.lang.swift.ref.function.subscript` SourceKit key.
    case refFunctionSubscript = "source.lang.swift.ref.function.subscript"
    /// The `source.lang.swift.ref.generic_type_param` SourceKit key.
    case refGenericTypeParam = "source.lang.swift.ref.generic_type_param"
    /// The `source.lang.swift.ref.macro` SourceKit key.
    case refMacro = "source.lang.swift.ref.macro"
    /// The `source.lang.swift.ref.module` SourceKit key.
    case refModule = "source.lang.swift.ref.module"
    /// The `source.lang.swift.ref.opaquetype` SourceKit key.
    case refOpaquetype = "source.lang.swift.ref.opaquetype"
    /// The `source.lang.swift.ref.precedencegroup` SourceKit key.
    case refPrecedenceGroup = "source.lang.swift.ref.precedencegroup"
    /// The `source.lang.swift.ref.protocol` SourceKit key.
    case refProtocol = "source.lang.swift.ref.protocol"
    /// The `source.lang.swift.ref.struct` SourceKit key.
    case refStruct = "source.lang.swift.ref.struct"
    /// The `source.lang.swift.ref.typealias` SourceKit key.
    case refTypeAlias = "source.lang.swift.ref.typealias"
    /// The `source.lang.swift.ref.var.class` SourceKit key.
    case refVarClass = "source.lang.swift.ref.var.class"
    /// The `source.lang.swift.ref.var.global` SourceKit key.
    case refVarGlobal = "source.lang.swift.ref.var.global"
    /// The `source.lang.swift.ref.var.instance` SourceKit key.
    case refVarInstance = "source.lang.swift.ref.var.instance"
    /// The `source.lang.swift.ref.var.local` SourceKit key.
    case refVarLocal = "source.lang.swift.ref.var.local"
    /// The `source.lang.swift.ref.var.static` SourceKit key.
    case refVarStatic = "source.lang.swift.ref.var.static"
    /// The `source.lang.swift.stmt.brace` SourceKit key.
    case stmtBrace = "source.lang.swift.stmt.brace"
    /// The `source.lang.swift.stmt.case` SourceKit key.
    case stmtCase = "source.lang.swift.stmt.case"
    /// The `source.lang.swift.stmt.for` SourceKit key.
    case stmtFor = "source.lang.swift.stmt.for"
    /// The `source.lang.swift.stmt.foreach` SourceKit key.
    case stmtForEach = "source.lang.swift.stmt.foreach"
    /// The `source.lang.swift.stmt.guard` SourceKit key.
    case stmtGuard = "source.lang.swift.stmt.guard"
    /// The `source.lang.swift.stmt.if` SourceKit key.
    case stmtIf = "source.lang.swift.stmt.if"
    /// The `source.lang.swift.stmt.repeatwhile` SourceKit key.
    case stmtRepeatWhile = "source.lang.swift.stmt.repeatwhile"
    /// The `source.lang.swift.stmt.switch` SourceKit key.
    case stmtSwitch = "source.lang.swift.stmt.switch"
    /// The `source.lang.swift.stmt.while` SourceKit key.
    case stmtWhile = "source.lang.swift.stmt.while"
    /// The `source.lang.swift.structure.elem.condition_expr` SourceKit key.
    case structureElemConditionExpr = "source.lang.swift.structure.elem.condition_expr"
    /// The `source.lang.swift.structure.elem.expr` SourceKit key.
    case structureElemExpr = "source.lang.swift.structure.elem.expr"
    /// The `source.lang.swift.structure.elem.id` SourceKit key.
    case structureElemID = "source.lang.swift.structure.elem.id"
    /// The `source.lang.swift.structure.elem.init_expr` SourceKit key.
    case structureElemInitExpr = "source.lang.swift.structure.elem.init_expr"
    /// The `source.lang.swift.structure.elem.pattern` SourceKit key.
    case structureElemPattern = "source.lang.swift.structure.elem.pattern"
    /// The `source.lang.swift.structure.elem.typeref` SourceKit key.
    case structureElemTypeRef = "source.lang.swift.structure.elem.typeref"
    /// The `source.lang.swift.syntaxtype.argument` SourceKit key.
    case syntaxTypeArgument = "source.lang.swift.syntaxtype.argument"
    /// The `source.lang.swift.syntaxtype.attribute.builtin` SourceKit key.
    case syntaxTypeAttributeBuiltIn = "source.lang.swift.syntaxtype.attribute.builtin"
    /// The `source.lang.swift.syntaxtype.attribute.id` SourceKit key.
    case syntaxTypeAttributeID = "source.lang.swift.syntaxtype.attribute.id"
    /// The `source.lang.swift.syntaxtype.buildconfig.id` SourceKit key.
    case syntaxTypeBuildConfigID = "source.lang.swift.syntaxtype.buildconfig.id"
    /// The `source.lang.swift.syntaxtype.buildconfig.keyword` SourceKit key.
    case syntaxTypeBuildConfigKeyword = "source.lang.swift.syntaxtype.buildconfig.keyword"
    /// The `source.lang.swift.syntaxtype.comment` SourceKit key.
    case syntaxTypeComment = "source.lang.swift.syntaxtype.comment"
    /// The `source.lang.swift.syntaxtype.comment.mark` SourceKit key.
    case syntaxTypeCommentMark = "source.lang.swift.syntaxtype.comment.mark"
    /// The `source.lang.swift.syntaxtype.comment.url` SourceKit key.
    case syntaxTypeCommentURL = "source.lang.swift.syntaxtype.comment.url"
    /// The `source.lang.swift.syntaxtype.doccomment` SourceKit key.
    case syntaxTypeDocComment = "source.lang.swift.syntaxtype.doccomment"
    /// The `source.lang.swift.syntaxtype.doccomment.field` SourceKit key.
    case syntaxTypeDocCommentField = "source.lang.swift.syntaxtype.doccomment.field"
    /// The `source.lang.swift.syntaxtype.identifier` SourceKit key.
    case syntaxTypeIdentifier = "source.lang.swift.syntaxtype.identifier"
    /// The `source.lang.swift.syntaxtype.keyword` SourceKit key.
    case syntaxTypeKeyword = "source.lang.swift.syntaxtype.keyword"
    /// The `source.lang.swift.syntaxtype.number` SourceKit key.
    case syntaxTypeNumber = "source.lang.swift.syntaxtype.number"
    /// The `source.lang.swift.syntaxtype.objectliteral` SourceKit key.
    case syntaxTypeObjectLiteral = "source.lang.swift.syntaxtype.objectliteral"
    /// The `source.lang.swift.syntaxtype.operator` SourceKit key.
    case syntaxTypeOperator = "source.lang.swift.syntaxtype.operator"
    /// The `source.lang.swift.syntaxtype.parameter` SourceKit key.
    case syntaxTypeParameter = "source.lang.swift.syntaxtype.parameter"
    /// The `source.lang.swift.syntaxtype.placeholder` SourceKit key.
    case syntaxTypePlaceholder = "source.lang.swift.syntaxtype.placeholder"
    /// The `source.lang.swift.syntaxtype.pounddirective.keyword` SourceKit key.
    case syntaxTypePoundDirectiveKeyword = "source.lang.swift.syntaxtype.pounddirective.keyword"
    /// The `source.lang.swift.syntaxtype.string` SourceKit key.
    case syntaxTypeString = "source.lang.swift.syntaxtype.string"
    /// The `source.lang.swift.syntaxtype.string_interpolation_anchor` SourceKit key.
    case syntaxTypeStringInterpolationAnchor = "source.lang.swift.syntaxtype.string_interpolation_anchor"
    /// The `source.lang.swift.syntaxtype.typeidentifier` SourceKit key.
    case syntaxTypeTypeIdentifier = "source.lang.swift.syntaxtype.typeidentifier"
    /// The `source.lang.swift.type` SourceKit key.
    case type = "source.lang.swift.type"
}
